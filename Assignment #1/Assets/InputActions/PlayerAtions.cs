//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputActions/PlayerAtions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerAtions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerAtions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerAtions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""fef88443-89c6-4f0e-8179-cbebf3107608"",
            ""actions"": [
                {
                    ""name"": ""moveInput"",
                    ""type"": ""Value"",
                    ""id"": ""6bd85569-1326-49ba-85f0-45eddb449983"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""lookInput"",
                    ""type"": ""Value"",
                    ""id"": ""c6da14ed-74f6-4a69-8803-7c7b1801a935"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""crouchInput"",
                    ""type"": ""Button"",
                    ""id"": ""ddb680f1-549c-4f4c-bb77-e564394028db"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""jumpInput"",
                    ""type"": ""Button"",
                    ""id"": ""167e5387-b0bf-47c6-9e60-4a79b3193932"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""sprintInput"",
                    ""type"": ""Button"",
                    ""id"": ""4b4bee87-6963-4dec-adb7-f5e2070ff2cb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0f08abbf-7144-4c32-8159-2889efdf8c38"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""lookInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""25301849-ef86-4359-8c70-0cfbd1e1e488"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""lookInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7f92130e-bb2e-4ff0-8f4f-ba45f33357c7"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""moveInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""ff830c8b-8b5d-45bf-9567-650e32565ab9"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""moveInput"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""fb311444-9da6-48f0-beec-02cf9aa59c3a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""moveInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c48f61df-b8ef-4e71-856a-be568312ebb7"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""moveInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0038d486-e08c-43a0-a2c5-8e575f8a10b2"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""moveInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""6956ba66-6264-4bb8-9766-038fd045fdd0"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""moveInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ab58e8b2-e126-4637-a661-5991d9aa19b0"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""crouchInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aa985abe-72f0-4ead-b0ca-481034678651"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""jumpInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""80ff6002-bac5-447d-9a22-235c3935b4e7"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""sprintInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_moveInput = m_Player.FindAction("moveInput", throwIfNotFound: true);
        m_Player_lookInput = m_Player.FindAction("lookInput", throwIfNotFound: true);
        m_Player_crouchInput = m_Player.FindAction("crouchInput", throwIfNotFound: true);
        m_Player_jumpInput = m_Player.FindAction("jumpInput", throwIfNotFound: true);
        m_Player_sprintInput = m_Player.FindAction("sprintInput", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_moveInput;
    private readonly InputAction m_Player_lookInput;
    private readonly InputAction m_Player_crouchInput;
    private readonly InputAction m_Player_jumpInput;
    private readonly InputAction m_Player_sprintInput;
    public struct PlayerActions
    {
        private @PlayerAtions m_Wrapper;
        public PlayerActions(@PlayerAtions wrapper) { m_Wrapper = wrapper; }
        public InputAction @moveInput => m_Wrapper.m_Player_moveInput;
        public InputAction @lookInput => m_Wrapper.m_Player_lookInput;
        public InputAction @crouchInput => m_Wrapper.m_Player_crouchInput;
        public InputAction @jumpInput => m_Wrapper.m_Player_jumpInput;
        public InputAction @sprintInput => m_Wrapper.m_Player_sprintInput;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @moveInput.started += instance.OnMoveInput;
            @moveInput.performed += instance.OnMoveInput;
            @moveInput.canceled += instance.OnMoveInput;
            @lookInput.started += instance.OnLookInput;
            @lookInput.performed += instance.OnLookInput;
            @lookInput.canceled += instance.OnLookInput;
            @crouchInput.started += instance.OnCrouchInput;
            @crouchInput.performed += instance.OnCrouchInput;
            @crouchInput.canceled += instance.OnCrouchInput;
            @jumpInput.started += instance.OnJumpInput;
            @jumpInput.performed += instance.OnJumpInput;
            @jumpInput.canceled += instance.OnJumpInput;
            @sprintInput.started += instance.OnSprintInput;
            @sprintInput.performed += instance.OnSprintInput;
            @sprintInput.canceled += instance.OnSprintInput;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @moveInput.started -= instance.OnMoveInput;
            @moveInput.performed -= instance.OnMoveInput;
            @moveInput.canceled -= instance.OnMoveInput;
            @lookInput.started -= instance.OnLookInput;
            @lookInput.performed -= instance.OnLookInput;
            @lookInput.canceled -= instance.OnLookInput;
            @crouchInput.started -= instance.OnCrouchInput;
            @crouchInput.performed -= instance.OnCrouchInput;
            @crouchInput.canceled -= instance.OnCrouchInput;
            @jumpInput.started -= instance.OnJumpInput;
            @jumpInput.performed -= instance.OnJumpInput;
            @jumpInput.canceled -= instance.OnJumpInput;
            @sprintInput.started -= instance.OnSprintInput;
            @sprintInput.performed -= instance.OnSprintInput;
            @sprintInput.canceled -= instance.OnSprintInput;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnMoveInput(InputAction.CallbackContext context);
        void OnLookInput(InputAction.CallbackContext context);
        void OnCrouchInput(InputAction.CallbackContext context);
        void OnJumpInput(InputAction.CallbackContext context);
        void OnSprintInput(InputAction.CallbackContext context);
    }
}
